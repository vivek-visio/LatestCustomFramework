// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.5-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LatestCustomFramework
@_exported import LatestCustomFramework
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DScrollViewElement : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(size: CoreFoundation.CGSize, backgroundColor: UIKit.UIColor = .white)
  @_Concurrency.MainActor(unsafe) convenience public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor = .white)
  @_Concurrency.MainActor(unsafe) convenience public init(width: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor = .white)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat, backgroundColor: UIKit.UIColor = .white)
  @objc deinit
}
public enum DViewSafeArea {
  case top, leading, trailing, bottom, vertical, horizontal, all, none
  public static func == (a: LatestCustomFramework.DViewSafeArea, b: LatestCustomFramework.DViewSafeArea) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func edgeTo(_ view: UIKit.UIView, safeArea: LatestCustomFramework.DViewSafeArea = .none) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func withBackground(color: UIKit.UIColor) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func withBackground(image: UIKit.UIImage, contentMode: UIKit.UIView.ContentMode = .scaleAspectFit) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addStatusBarCover(backgroundColor: UIKit.UIColor = .white) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addScrollView(_ scrollView: LatestCustomFramework.DScrollView, withSafeArea: LatestCustomFramework.DViewSafeArea = .none, hasStatusBarCover: Swift.Bool = false, statusBarBackgroundColor: UIKit.UIColor = .white, container: LatestCustomFramework.DScrollViewContainer, elements: [UIKit.UIView]) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withSize(_ size: CoreFoundation.CGSize) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withHeight(_ height: CoreFoundation.CGFloat) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func withWidth(_ width: CoreFoundation.CGFloat) -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DScrollViewContainer : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) convenience public init(axis: UIKit.NSLayoutConstraint.Axis = .vertical, spacing: CoreFoundation.CGFloat = 0)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func edgeTo(_ scrollView: UIKit.UIScrollView) -> UIKit.UIStackView?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DScrollView : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension LatestCustomFramework.DViewSafeArea : Swift.Equatable {}
extension LatestCustomFramework.DViewSafeArea : Swift.Hashable {}
